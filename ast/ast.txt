https://www.linux.org.ru/forum/development/3325550

В целом, картина такова: есть входной поток текста -- программа на входном языке. Язык описывается грамматикой. 
Транслятор -- это программа, которая по указанной грамматике строит внутреннее представление программы и переводит 
его в пригодный для исполнения вид. Один и тот же язык можно написать несколькими грамматиками, то есть описать неоднозначно. 
Да и на разных языках можно написать одинаковые программы (которые будут оттранслированы в такую же точно структуру). 
Такую структуру, независимую от представления, в памяти представляет семантическое дерево (в общем виде) 
или в более частном, AST (абстрактные операции с одинаковой заданной семантикой).

Картина "в целом" транслятора: лексер (токенайзер) разбирает входной поток текста на поток токенов (лексем); 
парсер разбирает этот поток лексем и строит дерево вывода (в конкретном синтаксисе, зависимом от грамматики и её особенностей); 
Это проверка синтаксиса, не семантики. Из дерева вывода выкидываются лишние узлы, узлы проверяются на инварианты
(вроде проверки типа выражения в оп. присваивания и типа переменной, которой присваиваем), проверяем семантику, и получаем AST.
Потом трансформациями из AST получаем AST оптимизированный (вроде оптимизации подвыражений и т.п.), 
семантически эквивалентный старому. Потом получаем конечный AST, который используется для конечной кодогенерации
(исполняемого кода (раскраска графа, и т.п. для регистрового байткода), или текста (для трансформаций текст-в-текст)).
